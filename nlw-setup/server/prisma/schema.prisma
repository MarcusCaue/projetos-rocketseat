// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// -> Aqui é onde vamos criar as nossas tabelas que serão convertidas em comandos SQL.
// -> As migrations são como que versionamentos do nosso Banco de Dados, assim como o git é para o código
// -> O prisma, através do comando "npx prisma studio", abre uma página para que nós possamos ver graficamente como está o nosso BD

generator client {
  provider = "prisma-client-js"
}

// Gera um arquivo com um diagrama visual do BD
generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Criando uma entidade
// model NomeTabela { nomeAtributo TipoDado  }
// Sim, não se separa os campos por vírgulas
model Habit {
  id         String          @id @default(uuid()) // uuid() -> ids únicos universais
  title      String
  created_at DateTime
  dayHabits  DayHabit[] // Não cria uma coluna nova, apenas indica que existe um relacionamento ao prisma
  weekDays   HabitWeekDays[]

  @@map("habits") // forma pela qual a entidade será chamada
}

model HabitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int // Representa os dias da semana em valores inteiros de 0 a 6

  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}

// Só vão ser cadastrados dias em que foi concluído pelo menos um hábito
model Day {
  id        String     @id @default(uuid())
  date      DateTime
  dayHabits DayHabit[]

  @@unique([date])
  @@map("day")
}

model DayHabit {
  id       String @id @default(uuid())
  day_id   String
  habit_id String

  // Definindo os relacionamentos e as chaves estrangeiras
  day   Day   @relation(fields: [day_id], references: [id])
  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([day_id, habit_id])
  @@map("day_habits")
}
